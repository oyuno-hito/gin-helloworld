// Code generated by MockGen. DO NOT EDIT.
// Source: src/repository/userRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/oyuno-hito/gin-helloworld/src/repository"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockUserRepository) FindById(id int) (*repository.UserRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(*repository.UserRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockUserRepositoryMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockUserRepository)(nil).FindById), id)
}

// FindByLoginInfo mocks base method.
func (m *MockUserRepository) FindByLoginInfo(loginId, password string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginInfo", loginId, password)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginInfo indicates an expected call of FindByLoginInfo.
func (mr *MockUserRepositoryMockRecorder) FindByLoginInfo(loginId, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginInfo", reflect.TypeOf((*MockUserRepository)(nil).FindByLoginInfo), loginId, password)
}

// FindByLoginInfoOrNull mocks base method.
func (m *MockUserRepository) FindByLoginInfoOrNull(loginId, password string) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginInfoOrNull", loginId, password)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginInfoOrNull indicates an expected call of FindByLoginInfoOrNull.
func (mr *MockUserRepositoryMockRecorder) FindByLoginInfoOrNull(loginId, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginInfoOrNull", reflect.TypeOf((*MockUserRepository)(nil).FindByLoginInfoOrNull), loginId, password)
}
