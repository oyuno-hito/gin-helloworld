// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/6xTTWvVQBT9L1eXsYl1U7KrGykKFsRVKWWa3L5MSWbGmUnr45GFGQRxoTu7FSkVFEV5",
	"+AEW/8z4BP+F3El9eV9UEFcZ7s0598y5Z0aQyUpJgcIaSEdgsgIrFo6lHHCxp/FBjcZSQWmpUFuOM22e",
	"09kOFUIKxmouBtBEoJgxx1KH5oHUFbOQ9sVoEdBEQHO4xhzSnZ56hmh3CpL7h5hZmlIb1HtcHMhldYJV",
	"SF98yCpVEsy3n7wbe3fi3dvJ6Ztf7tmyjgi0LBdx7sy7c99+9u58pfIFWU0EBrNaczu8R2Z2evaRadSb",
	"tS2mLhOoK/e0hbUKGuL4cy3LbZAx4OJagWUpj6UuyZkj1IZLASlcX0tIulQomOKQwo21ZG09mGeLMD0O",
	"jgaXZLfLHE2mubIdg3fvfPvBt6fejTe3tyCQaUbdrRxS2JbG3gkU3aLQ2JsyHxJRJoVFETiZUiXPAio+",
	"NFL0eaLTVY0HkMKVuA9cfJG2eD5qzXwerK4xFIySwnR2rifJ8i3u3u72wQZmmiLYpRINkLX9uwGvfHvm",
	"3ZNLPCCafxNDyE7NXG4HuEpP+80759sv3r32bvzj61P/6P1sEn+6x5OXHyfPX0y+n6xSewvtfYN6i4as",
	"lvtfFtffJCztUgvoXwP00xGWpBYiYHkVQkU9Mic8Hk3RhnRnBLUuLx5FGselzFhZSGPTjWQjiSnqzW7z",
	"OwAA///J+3xgwQQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
